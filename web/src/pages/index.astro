---
import Filter from "@/components/Filter.astro";
import Layout from "../layouts/Layout.astro";
import Navbar from "@/components/Navbar.astro";
import "@webtui/theme-catppuccin";
---

<Layout>
  <row self-="grow" align-="center" id="section">
    <column>
      <column gap-="1" space-="px:2 py:1" id="main">
        <Navbar />
        <column gap-="1">
          <header is-="column" gap-="1" space-="px:1">
            <h1 tabindex="0" autofocus>
              UI Design that goes <strong>HARD</strong>
            </h1>
            <p tabindex="0">
              WebTUI is a modular CSS library that brings the beauty of Terminal
              UIs to the browser
            </p>
          </header>
          <div id="start-links" box-="square contain:!top">
            <row>
              <span is-="badge" variant-="background0" tabindex="0"
                >Contents</span
              >
            </row>
            <column space-="px:1 pb:1" is-="typography-block">
              <a tabindex="0" href="/start/intro"
                ><code>S</code>
                <span>Get Started</span>
              </a>
              <a tabindex="0" href="/examples"
                ><code>E</code>
                <span>View Examples</span>
              </a>
              <a tabindex="0" href="/examples"
                ><code>C</code>
                <span>Components</span>
              </a>
              <a tabindex="0" href="/examples"
                ><code>/</code>
                <span>Search</span>
              </a>
            </column>
          </div>
        </column>
      </column>
      <row id="statusline">
        <span is-="badge" variant-="blue">NORMAL</span>
        <span is-="badge" variant-="background1">
          <span class="branch-name">&#xe725; master</span>
        </span>
        <row self-="grow">
          <span is-="badge" variant-="background0">index.astro</span>
        </row>
        <span is-="badge" variant-="background0">utf-8</span>
        <span is-="badge" variant-="background1">
          <span id="percent">Top</span>
        </span>
        <span is-="badge" variant-="blue"><span id="line">1</span>:1</span>
      </row>
      <input id="cmdline" />
    </column>
  </row>
  <Filter />
</Layout>

<style>
  #start-links {
    --box-border-color: var(--background2);
    display: flex;
    flex-direction: column;
    gap: 1lh;

    a {
      text-decoration: none;
      color: var(--foreground1);
      display: inline-flex;
      gap: 1ch;

      span {
        text-decoration: underline;
      }
    }
  }

  #statusline {
    background-color: var(--background0);
  }

  #cmdline {
    background-color: var(--background0);
    padding: 0;
  }

  #section {
    background-color: var(--crust);
    padding: 1lh 2ch;

    #main {
      background-color: var(--background0);
      width: 100%;
      max-width: 84ch;
    }
  }

  header h1 strong {
    text-decoration: underline;
    color: #eba0ac;
  }

  header [tabindex="0"]:focus {
    background-color: var(--background1);
  }

  .branch-name {
    color: #89b4fa;
  }

  #shorcuts-badge {
    display: inline-flex;
  }

  #content-badge {
    display: none;
  }

  @media (max-width: 80ch) {
    #statusline,
    #cmdline {
      display: none;
    }

    #start-links code {
      display: none;
    }

    #shorcuts-badge {
      display: none;
    }

    #content-badge {
      display: inline-flex;
    }
  }
</style>

<script>
  import {
    applyVimCursorHighlight,
    applyVimNavigation,
    isUserTyping,
  } from "@/utils/vim";

  const header = document.querySelector("header") as HTMLElement;
  const headerElements: NodeListOf<HTMLElement> = header.querySelectorAll(
    'header [tabindex="0"]',
  );
  const lineNumber = document.getElementById("line") as HTMLSpanElement;
  const percentage = document.getElementById("percent") as HTMLSpanElement;
  const cmdline = document.getElementById("cmdline") as HTMLInputElement;

  if (window.innerHeight > 800) {
    applyVimCursorHighlight(headerElements[0]);
  }

  applyVimNavigation(header, 'header [tabindex="0"]', (element) => {
    const index = Array.from(headerElements).indexOf(element);

    lineNumber.innerText = String(index + 1);

    if (index === 0) {
      percentage.innerText = "Top";
    } else if (index === headerElements.length) {
      percentage.innerText = "Bot";
    } else {
      const percent = Math.round((index / headerElements.length) * 100);
      percentage.innerText = String(percent) + "%";
    }
  });

  window.addEventListener("keydown", (e) => {
    if (isUserTyping()) return;

    if (e.key === ":") {
      cmdline.focus();
    }

    if (e.key === "s" || e.key === "S") {
      window.location.href = "/start/intro";
    }

    if (e.key === "e" || e.key === "E") {
      window.location.href = "/examples";
    }

    if (e.key === "c" || e.key === "C") {
      window.location.href = "/components/typography";
    }
  });

  cmdline.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      const value = cmdline.value;

      if (value.startsWith(":") && value.includes("q")) {
        alert("Skill Issue");
      }
    }
  });
</script>
